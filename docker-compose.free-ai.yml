version: '3.8'

services:
  # Free Text-to-Speech Service (gTTS)
  free-tts:
    build:
      context: ./backend/free-tts-service
      dockerfile: Dockerfile
    ports:
      - "3003:3003"
    volumes:
      - tts-audio:/app/audio
    environment:
      - NODE_ENV=production
      - PORT=3003
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - ai-network

  # Free Speech-to-Text Service (Whisper.cpp)
  free-stt:
    build:
      context: ./backend/free-stt-service
      dockerfile: Dockerfile
    ports:
      - "3004:3004"
    volumes:
      - stt-models:/app/models
      - stt-uploads:/app/uploads
    environment:
      - NODE_ENV=production
      - PORT=3004
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - ai-network

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant-data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - ai-network

  # PostgreSQL Database for GDPR Logging
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backend/docker-compose/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    environment:
      - POSTGRES_DB=ai_assistant
      - POSTGRES_USER=ai_user
      - POSTGRES_PASSWORD=ai_secure_password_2024
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_user -d ai_assistant"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - ai-network

  # n8n Workflow Automation
  n8n:
    image: n8nio/n8n:latest
    ports:
      - "5678:5678"
    volumes:
      - n8n-data:/home/node/.n8n
      - ./backend/n8n-workflows:/workflows
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=admin123
      - N8N_HOST=0.0.0.0
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - WEBHOOK_URL=http://localhost:5678
      - GENERIC_TIMEZONE=Europe/Berlin
      - N8N_LOG_LEVEL=info
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=n8n_user
      - DB_POSTGRESDB_PASSWORD=n8n_secure_password_2024
    depends_on:
      postgres:
        condition: service_healthy
      free-tts:
        condition: service_healthy
      free-stt:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - ai-network

  # Frontend (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_N8N_WEBHOOK_URL=http://localhost:5678/webhook/chat
      - NEXT_PUBLIC_FREE_TTS_URL=http://localhost:3003
      - NEXT_PUBLIC_FREE_STT_URL=http://localhost:3004
      - GEMINI_API_KEY=AIzaSyAj0btu828R6Vz2275gMktnE7eOt53oJbQ
    depends_on:
      n8n:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - ai-network

  # Redis for Caching (Optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - ai-network

volumes:
  tts-audio:
    driver: local
  stt-models:
    driver: local
  stt-uploads:
    driver: local
  qdrant-data:
    driver: local
  postgres-data:
    driver: local
  n8n-data:
    driver: local
  redis-data:
    driver: local

networks:
  ai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
